local data = require("main.game_data")
local UI_Mods = require("UI.UI_Modules")
function init(self)
	msg.post("/gui#in_game_ui", "disable")
	self.load_bar = UI_Mods.Submenu.get_submenu_node("Loading","loading_bar")
	msg.post(".", "acquire_input_focus")
	self.running = false
	self.special_buttons = {switch = false}
	self.muted = false
	self.timer = -1
	self.flashing = false

	self.piece_selections = {
		["red"] = true,
		["blue"] = true,
		["green"] = true,
		["purple"] = false,
		["yellow"] = false,
		["cyan"] = false}
	self.piece_colors = {
		["red"] = "#ff9999",
		["blue"] = "#99b3ff",
		["green"] = "#99cc99",
		["purple"] = "#cc99cc",
		["yellow"] = "#ffff80",
		["cyan"] = "#99cccc"}
	
	self.pieces_selected = 3
	self.text_editing = nil
	self.current_menu = "Loading"
end

function final(self)
	--print(self.muted)
	data.muted = self.muted
end

local message_functions = {
	["loaded_data"] = function (self,message,sender)
 		print("Data loaded")
		
		gui.cancel_animation(self.load_bar, "size")
		gui.animate(self.load_bar, "size", vmath.vector3(548,30,0), gui.EASING_OUTCUBIC, 2.6)

		gui.set_enabled(gui.get_node("Start/Continue"), data.getSaved())
		self.current_menu = "Start"
		timer.delay(2.5, false, function (self, handle, time_elapsed)
			gui.animate(UI_Mods.Submenu.get_submenu_node("Loading", "main"), "color.w", 0, gui.EASING_INEXPO, 0.7)
		end)
	end,
	["attach_color_animation"] = function (self, message, sender)
		local node = gui.get_node(message.node)
		gui.set_color(node, UI_Mods.Colors.hsbToRgb(0, 0.25, 0.90))
		--gui.set_color(node, vmath.vector4(1,0,1,1))
		gui.animate(node, "color", vmath.vector4(UI_Mods.Colors.hsbToRgb(1, 0.25, 0.90)), gui.EASING_LINEAR, 15)
	end
}

function on_message(self, message_id, message, sender)
	for i,v in pairs(message_functions) do --probably don't need a loop
		if message_id == hash(i) then
			v(self,message,sender)
		end
	end
end

local function changeToGame()
	msg.post("/ui_fade#fade", "fade")
		timer.delay(0.4, false, function (self, handle, time_elapsed)
			msg.post("/gui#in_game_ui", "enable")
			msg.post("/gui#in_game_ui", "loaded_data")
			msg.post("#", "disable")
		end)
end

local pick_node_actions = {
	--STORE
	["Store/back"] = function (self) 
		self.current_menu = "Start"
		gui.set_enabled(gui.get_node("Store/back"), false)
		UI_Mods.Submenu.toggle_menu("Store", vmath.vector3(640,0,0), false)
		UI_Mods.Submenu.toggle_menu("Start", vmath.vector3(0,0,0), true)
	end,
	--OPTIONS this will go in its own UI component at some point probably
	["Options/back"] = function (self)
		gui.set_enabled(gui.get_node("Options/back"), false)
		UI_Mods.Submenu.toggle_menu("Options", vmath.vector3(0,0,0), false)
		self.current_menu = "Start"
		UI_Mods.Submenu.toggle_menu("Start", vmath.vector3(0,0,0), true)
	end,
	--START
	["Start/Store"] = function (self) 
		self.current_menu = "Store"
		UI_Mods.Buttons.Press(gui.get_node("Start/Store"), "Store")
		UI_Mods.Submenu.toggle_menu("Start", vmath.vector3(-640,0,0), false)
		UI_Mods.Submenu.toggle_menu("Store", vmath.vector3(0,0,0), true)
		UI_Mods.Buttons.Hover(gui.get_node("Store/back"), "Back",false)
		timer.delay(1,false,function (self, handle, time_elapsed)
			gui.set_enabled(gui.get_node("Store/back"), true)
		end)
	end,

	["Start/Options"] = function (self) 
		self.current_menu = "Options"
		--print(self.current_state)
		UI_Mods.Buttons.Press(gui.get_node("Start/Options"), "Options")
		UI_Mods.Submenu.toggle_menu("Start", vmath.vector3(640,0,0), false)
		UI_Mods.Submenu.toggle_menu("Options", vmath.vector3(640,0,0), true)
		UI_Mods.Buttons.Hover(gui.get_node("Options/back"), "Back",false)
		timer.delay(1,false,function (self, handle, time_elapsed)
			gui.set_enabled(gui.get_node("Options/back"), true)
		end)
	end,
	["Start/Quit"] = function (self) 
		self.current_menu = "OS"
		UI_Mods.Buttons.Press(gui.get_node("Start/Quit"), "Quit")
		timer.delay(0.16, false, function()
			sys.exit(0)
		end)
	end,
	["Start/New"] = function (self)
		self.current_menu = "New"
		UI_Mods.Buttons.Press(gui.get_node("Start/New"), "New")
		UI_Mods.Submenu.toggle_menu("Start", vmath.vector3(0,1136,0), false)
		UI_Mods.Submenu.toggle_menu("New", vmath.vector3(320,1136,0), true)
		self.current_state = "Waiting"
	end,
	["Start/Continue"] = function (self)
		if not gui.is_enabled(gui.get_node("Start/Continue")) then return end
		self.current_menu = "Game"
		self.running = true
		msg.post("/game#Board_control", "continue")
		UI_Mods.Buttons.Press(gui.get_node("Start/Continue"), "Continue")
		changeToGame()
		self.current_state = "Playing"
	end,
	--NEW GAME
	["New/h_size"] = function (self)
		self.text_editing = UI_Mods.TextInput.editText(self.text_editing,gui.get_node("New/h_size"))
	end,
	["New/v_size"] = function (self)
		self.text_editing = UI_Mods.TextInput.editText(self.text_editing,gui.get_node("New/v_size"))
	end,
	["New/start"] = function (self,action)
		self.current_menu = "Start"
		--self.running = true
		UI_Mods.Buttons.Press(gui.get_node("New/start"), "Continue")
		timer.delay(0.4, false, function (self, handle, time_elapsed)
			UI_Mods.Submenu.toggle_menu("Start", vmath.vector3(0,0,0), true,0.1)
			UI_Mods.Submenu.toggle_menu("New", vmath.vector3(320,0,0), false,0.1)
		end)
		self.current_state = "Waiting"
		msg.post("/game#Board_control", "create_board",
			{sizex = gui.get_text(gui.get_node("New/h_size")),
			sizey = gui.get_text(gui.get_node("New/v_size")),
			pieces = self.piece_selections})
		changeToGame()
	end,
}

local function pieceSelection(self,action)
	for i,_ in pairs(self.piece_selections) do
		local p_node = gui.get_node("New/"..i.."/back")
		if gui.pick_node(p_node, action.x, action.y) then
			if self.piece_selections[i] == false  then -- not already selected
				--The GUI flipbook animations are disabled as they do not work at the moment
				gui.set_color(p_node,UI_Mods.Colors.hex(self.piece_colors[i]))
				self.piece_selections[i] = true
				self.pieces_selected = self.pieces_selected + 1
				--gui.play_flipbook(gui.get_node(i.."/tex"), i)
			elseif self.pieces_selected > 2 then-- already selected
				gui.set_color(p_node,vmath.vector3(.7))
				self.piece_selections[i] = false
				self.pieces_selected = self.pieces_selected - 1
				--gui.play_flipbook(gui.get_node(i.."/tex"), i.."_reverse")
			end
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("text_input") then
		--print(self.text_editing)
		if self.text_editing == nil then
			return
		end
		local number = tonumber(action.text)
		if number == nil then return end
		number = math.min(8, number)
		number = math.max(3, number)
		--set_size_text(self, ,)
		gui.set_text(self.text_editing, ""..number)
	
	elseif action_id == hash("tap") and action.pressed then
		if self.text_editing then
			UI_Mods.TextInput.endText(self.text_editing)
		end
		pieceSelection(self,action)
		for i,v in pairs(pick_node_actions) do
			if gui.pick_node(gui.get_node(i), action.x, action.y) then
				--print(self.current_menu)
				v(self,action)
			end
		end
	elseif action_id == nil and self.current_menu == "Store" then
		if gui.pick_node(gui.get_node("Store/back"), action.x, action.y) then
			UI_Mods.Buttons.Hover(gui.get_node("Store/back"), "Back",true)
		else
			UI_Mods.Buttons.Hover(gui.get_node("Store/back"), "Back",false)
		end
	elseif action_id == nil and self.current_menu == "Options" then
		if gui.pick_node(gui.get_node("Options/back"), action.x, action.y) then
			UI_Mods.Buttons.Hover(gui.get_node("Options/back"), "Back",true)
		else
			UI_Mods.Buttons.Hover(gui.get_node("Options/back"), "Back",false)
		end
	
	end
end

function changeBackgroundColor(self) --change to cycle color
	--print(newHue)
	gui.set_color(gui.get_node("background"), vmath.vector4(0.8,0.35,0.35,1))
	local function changeColor(self,handle,time_elapsed)
		self.counter = self.counter + 1
		local i = self.counter
		local r = 0.35
		local g = 0.35
		local b = 0.35
		if i <= 2 or i == 6 then
			r = 0.8
		end
		if i >= 2 and i <= 4 then
			g = 0.8
		end
		if i >= 4 then
			b = 0.8
		end
		print(i,r,g,b)
		gui.animate(gui.get_node("background"), "color", vmath.vector4(r, g, b, 1), gui.EASING_LINEAR, 6,0)
		if self.counter == 6 then
			startChanging()
			timer.cancel(handle)
		end
	end
	function startChanging()
		self.counter = 0
		timer.delay(6, true, changeColor)
	end
	startChanging()
end

--[[ EXP is currently not used and may be scrapped
function set_level_ui(self)
	self.lvl = leveling.get_level(data.exp) --current level (ex. 7)
	self.nextlvl = leveling.get_required_exp(self.lvl+1) --exp required for next level (ex. 26200)
	self.currentlvl = leveling.get_required_exp(self.lvl) --exp required for current level (ex. 22770)
	if last_exp == 0 then
		last_exp = self.currentlvl
		gui.set_text(gui.get_node("level_text1"), self.lvl)
	end
	local lastlvl = leveling.get_level(last_exp)
	--print(lastlvl,prevlvl,lvl)
	self.max = 0
	self.required = 0
	self.levelup = false
	local prevlvl=leveling.get_required_exp(self.lvl-1)
	if lastlvl ~= self.lvl then
		self.counter = last_exp-prevlvl
		
		self.max = self.currentlvl-prevlvl
		self.required = self.max
		self.levelup = true
		timer.delay(0.01, true, increase_bar)
	else 
		self.counter = math.max(0,last_exp-self.currentlvl)
		increase_exp(self)
	end
	last_exp = data.exp
end

function increase_bar(self,handle,time_elapsed)
	self.counter = self.counter + 8
	if self.counter >= self.max-8 then
		self.counter = self.max
		if self.levelup == true then
			self.counter = 0; increase_exp(self); gui.set_text(gui.get_node("level_text1"), self.lvl); self.levelup = false 
			if data.crystals < 24 then
				data.crystals = data.crystals + 1
				sound.play("/music#ding")
				msg.post("/game_ui#menus", "level_up")
			end
			gui.animate(gui.get_node("level_up"), "position.y",100, gui.EASING_OUTINEXPO, 1.4)
			gui.animate(gui.get_node("level_up"), "color.w", 1, gui.EASING_OUTEXPO, .7, 0, function()
				gui.animate(gui.get_node("level_up"), "color.w", 0, gui.EASING_INEXPO, .7,0,function()
					gui.set_position(gui.get_node("level_up"), vmath.vector3(435,20,0))
					gui.set_text(gui.get_node("text/crystals"),data.crystals.."/24")
				end)
			end)
		end
		timer.cancel(handle)
	end
	gui.set_text(gui.get_node("level_text2"), comma_value(self.counter).."/"..comma_value(self.required))
	gui.set_flipbook_cursor(gui.get_node("level"), self.counter/self.required)
end

function increase_exp(self)
	self.max = math.max(0,data.exp-self.currentlvl)
	self.required = (self.nextlvl-self.currentlvl)
	--print(self.required)
	timer.delay(0.01, true, increase_bar)
end]]